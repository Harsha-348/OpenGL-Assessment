(()=>{"use strict";self.onmessage=function(t){const{type:e,imageData:a,width:n,height:s}=t.data;if("process"===e){const t=function(t,e,a){const{data:n}=t,s=new Uint8ClampedArray(n.length),o=new Uint8ClampedArray(e*a);for(let t=0;t<n.length;t+=4)o[Math.floor(t/4)]=.299*n[t]+.587*n[t+1]+.114*n[t+2];const r=[-1,0,1,-2,0,2,-1,0,1],f=[-1,-2,-1,0,0,0,1,2,1];for(let t=1;t<a-1;t++)for(let a=1;a<e-1;a++){let n=0,l=0;for(let s=-1;s<=1;s++)for(let c=-1;c<=1;c++){const i=(t+s)*e+(a+c),d=3*(s+1)+(c+1);n+=o[i]*r[d],l+=o[i]*f[d]}const c=Math.min(255,Math.sqrt(n*n+l*l)),i=4*(t*e+a);s[i]=c,s[i+1]=c,s[i+2]=c,s[i+3]=255}return new ImageData(s,e,a)}(a,n,s);self.postMessage({type:"processed",data:t},[t.data.buffer])}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2LmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoibUJBRUFBLEtBQUtDLFVBQVksU0FBVUMsR0FDdkIsTUFBTSxLQUFFQyxFQUFJLFVBQUVDLEVBQVMsTUFBRUMsRUFBSyxPQUFFQyxHQUFXSixFQUFFSyxLQUM3QyxHQUFhLFlBQVRKLEVBQW9CLENBQ3BCLE1BQU1LLEVBS2QsU0FBcUJKLEVBQVdDLEVBQU9DLEdBQ25DLE1BQU0sS0FBRUMsR0FBU0gsRUFDWEksRUFBUyxJQUFJQyxrQkFBa0JGLEVBQUtHLFFBRXBDQyxFQUFPLElBQUlGLGtCQUFrQkosRUFBUUMsR0FDM0MsSUFBSyxJQUFJTSxFQUFJLEVBQUdBLEVBQUlMLEVBQUtHLE9BQVFFLEdBQUssRUFFbENELEVBRFlFLEtBQUtDLE1BQU1GLEVBQUksSUFDZixLQUFRTCxFQUFLSyxHQUFLLEtBQVFMLEVBQUtLLEVBQUksR0FBSyxLQUFRTCxFQUFLSyxFQUFJLEdBR3pFLE1BQU1HLEVBQVMsRUFBRSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDckNDLEVBQVMsRUFBRSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFM0MsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlYLEVBQVMsRUFBR1csSUFDNUIsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUliLEVBQVEsRUFBR2EsSUFBSyxDQUNoQyxJQUFJQyxFQUFLLEVBQUdDLEVBQUssRUFFakIsSUFBSyxJQUFJQyxHQUFNLEVBQUdBLEdBQU0sRUFBR0EsSUFDdkIsSUFBSyxJQUFJQyxHQUFNLEVBQUdBLEdBQU0sRUFBR0EsSUFBTSxDQUM3QixNQUFNQyxHQUFPTixFQUFJSSxHQUFNaEIsR0FBU2EsRUFBSUksR0FDOUJFLEVBQXVCLEdBQVZILEVBQUssSUFBVUMsRUFBSyxHQUN2Q0gsR0FBTVIsRUFBS1ksR0FBT1IsRUFBT1MsR0FDekJKLEdBQU1ULEVBQUtZLEdBQU9QLEVBQU9RLEVBQzdCLENBR0osTUFBTUMsRUFBWVosS0FBS2EsSUFBSSxJQUFLYixLQUFLYyxLQUFLUixFQUFLQSxFQUFLQyxFQUFLQSxJQUNuREcsRUFBd0IsR0FBakJOLEVBQUlaLEVBQVFhLEdBRXpCVixFQUFPZSxHQUFPRSxFQUNkakIsRUFBT2UsRUFBTSxHQUFLRSxFQUNsQmpCLEVBQU9lLEVBQU0sR0FBS0UsRUFDbEJqQixFQUFPZSxFQUFNLEdBQUssR0FDdEIsQ0FFSixPQUFPLElBQUlLLFVBQVVwQixFQUFRSCxFQUFPQyxFQUN4QyxDQXpDdUJ1QixDQUFZekIsRUFBV0MsRUFBT0MsR0FFN0NOLEtBQUs4QixZQUFZLENBQUUzQixLQUFNLFlBQWFJLEtBQU1DLEdBQVUsQ0FBQ0EsRUFBT0QsS0FBS3dCLFFBQ3ZFLENBQ0osQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL3NyYy93b3JrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBXZWIgV29ya2VyIGZvciBpbWFnZSBwcm9jZXNzaW5nXG5zZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3QgeyB0eXBlLCBpbWFnZURhdGEsIHdpZHRoLCBoZWlnaHQgfSA9IGUuZGF0YTtcbiAgICBpZiAodHlwZSA9PT0gJ3Byb2Nlc3MnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGRldGVjdEVkZ2VzKGltYWdlRGF0YSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSBUeXBlU2NyaXB0IGRvZXNuJ3Qga25vdyBhYm91dCBzZWxmLnBvc3RNZXNzYWdlIGluIHdvcmtlcnNcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IHR5cGU6ICdwcm9jZXNzZWQnLCBkYXRhOiByZXN1bHQgfSwgW3Jlc3VsdC5kYXRhLmJ1ZmZlcl0pO1xuICAgIH1cbn07XG5mdW5jdGlvbiBkZXRlY3RFZGdlcyhpbWFnZURhdGEsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGltYWdlRGF0YTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgIC8vIENvbnZlcnQgdG8gZ3JheXNjYWxlIGZpcnN0XG4gICAgY29uc3QgZ3JheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3aWR0aCAqIGhlaWdodCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IE1hdGguZmxvb3IoaSAvIDQpO1xuICAgICAgICBncmF5W2lkeF0gPSAwLjI5OSAqIGRhdGFbaV0gKyAwLjU4NyAqIGRhdGFbaSArIDFdICsgMC4xMTQgKiBkYXRhW2kgKyAyXTtcbiAgICB9XG4gICAgLy8gU2ltcGxlIFNvYmVsIGVkZ2UgZGV0ZWN0aW9uXG4gICAgY29uc3Qgc29iZWxYID0gWy0xLCAwLCAxLCAtMiwgMCwgMiwgLTEsIDAsIDFdO1xuICAgIGNvbnN0IHNvYmVsWSA9IFstMSwgLTIsIC0xLCAwLCAwLCAwLCAxLCAyLCAxXTtcbiAgICA7XG4gICAgZm9yIChsZXQgeSA9IDE7IHkgPCBoZWlnaHQgLSAxOyB5KyspIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IDE7IHggPCB3aWR0aCAtIDE7IHgrKykge1xuICAgICAgICAgICAgbGV0IGd4ID0gMCwgZ3kgPSAwO1xuICAgICAgICAgICAgLy8gQXBwbHkgU29iZWwga2VybmVsc1xuICAgICAgICAgICAgZm9yIChsZXQga3kgPSAtMTsga3kgPD0gMTsga3krKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGt4ID0gLTE7IGt4IDw9IDE7IGt4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWR4ID0gKHkgKyBreSkgKiB3aWR0aCArICh4ICsga3gpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXJuZWxJZHggPSAoa3kgKyAxKSAqIDMgKyAoa3ggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgZ3ggKz0gZ3JheVtpZHhdICogc29iZWxYW2tlcm5lbElkeF07XG4gICAgICAgICAgICAgICAgICAgIGd5ICs9IGdyYXlbaWR4XSAqIHNvYmVsWVtrZXJuZWxJZHhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBncmFkaWVudCBtYWduaXR1ZGVcbiAgICAgICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IE1hdGgubWluKDI1NSwgTWF0aC5zcXJ0KGd4ICogZ3ggKyBneSAqIGd5KSk7XG4gICAgICAgICAgICBjb25zdCBpZHggPSAoeSAqIHdpZHRoICsgeCkgKiA0O1xuICAgICAgICAgICAgLy8gU2V0IHRoZSByZXN1bHQgKGdyYXlzY2FsZSlcbiAgICAgICAgICAgIHJlc3VsdFtpZHhdID0gbWFnbml0dWRlOyAvLyBSXG4gICAgICAgICAgICByZXN1bHRbaWR4ICsgMV0gPSBtYWduaXR1ZGU7IC8vIEdcbiAgICAgICAgICAgIHJlc3VsdFtpZHggKyAyXSA9IG1hZ25pdHVkZTsgLy8gQlxuICAgICAgICAgICAgcmVzdWx0W2lkeCArIDNdID0gMjU1OyAvLyBBXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbWFnZURhdGEocmVzdWx0LCB3aWR0aCwgaGVpZ2h0KTtcbn1cbiJdLCJuYW1lcyI6WyJzZWxmIiwib25tZXNzYWdlIiwiZSIsInR5cGUiLCJpbWFnZURhdGEiLCJ3aWR0aCIsImhlaWdodCIsImRhdGEiLCJyZXN1bHQiLCJVaW50OENsYW1wZWRBcnJheSIsImxlbmd0aCIsImdyYXkiLCJpIiwiTWF0aCIsImZsb29yIiwic29iZWxYIiwic29iZWxZIiwieSIsIngiLCJneCIsImd5Iiwia3kiLCJreCIsImlkeCIsImtlcm5lbElkeCIsIm1hZ25pdHVkZSIsIm1pbiIsInNxcnQiLCJJbWFnZURhdGEiLCJkZXRlY3RFZGdlcyIsInBvc3RNZXNzYWdlIiwiYnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==