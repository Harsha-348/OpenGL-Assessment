(()=>{"use strict";var t={m:{},u:t=>t+".bundle.js"};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var s=t.g.document;if(!e&&s&&(s.currentScript&&"SCRIPT"===s.currentScript.tagName.toUpperCase()&&(e=s.currentScript.src),!e)){var i=s.getElementsByTagName("script");if(i.length)for(var n=i.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=i[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b="undefined"!=typeof document&&document.baseURI||self.location.href;var e=function(t,e,s,i){return new(s||(s=Promise))(function(n,a){function o(t){try{h(i.next(t))}catch(t){a(t)}}function r(t){try{h(i.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s(function(t){t(e)})).then(o,r)}h((i=i.apply(t,e||[])).next())})};class s{constructor(){this.lastFrameTime=0,this.frameCount=0,this.fps=0,this.isProcessing=!1,this.showEdges=!0,this.worker=null,this.canvas=document.getElementById("output"),this.ctx=this.canvas.getContext("2d"),this.fpsElement=document.getElementById("fps"),this.resolutionElement=document.getElementById("resolution"),this.statusElement=document.getElementById("status"),this.loadSampleBtn=document.getElementById("loadSample"),this.toggleEffectBtn=document.getElementById("toggleEffect"),this.setupEventListeners(),this.initializeWorker(),this.loadSampleImage(),setInterval(()=>this.updateFPS(),1e3)}setupEventListeners(){this.loadSampleBtn.addEventListener("click",()=>this.loadSampleImage()),this.toggleEffectBtn.addEventListener("click",()=>this.toggleEdgeDetection())}initializeWorker(){window.Worker?(this.worker=new Worker(new URL(t.p+t.u(396),t.b)),this.worker.onmessage=t=>this.handleWorkerMessage(t)):console.warn("Web Workers not supported, falling back to main thread processing")}handleWorkerMessage(t){const{type:e,data:s}=t.data;"processed"===e&&(this.drawImageData(s),this.frameCount++,this.isProcessing=!1,this.updateStatus("Idle"))}loadSampleImage(){return e(this,void 0,void 0,function*(){try{this.updateStatus("Loading sample image...");const t=yield fetch("sample.jpg"),e=yield t.blob();yield this.processImageFile(e)}catch(t){console.error("Error loading sample image:",t),this.updateStatus("Error loading image")}})}processImageFile(t){return e(this,void 0,void 0,function*(){if(!this.isProcessing){this.isProcessing=!0;try{const e=yield createImageBitmap(t);this.canvas.width=e.width,this.canvas.height=e.height,this.ctx.drawImage(e,0,0),this.updateResolution(e.width,e.height),this.showEdges&&this.applyEdgeDetection()}catch(t){console.error("Error processing image:",t),this.updateStatus("Error processing image"),this.isProcessing=!1}}})}applyEdgeDetection(){if(this.isProcessing)return;this.updateStatus("Processing..."),this.isProcessing=!0;const t=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);this.worker?this.worker.postMessage({type:"process",imageData:t,width:this.canvas.width,height:this.canvas.height},[t.data.buffer]):setTimeout(()=>{const e=this.detectEdges(t);this.drawImageData(e),this.frameCount++,this.isProcessing=!1,this.updateStatus("Idle")},0)}detectEdges(t){const{data:e,width:s,height:i}=t,n=new Uint8ClampedArray(e.length);for(let t=1;t<i-1;t++)for(let i=1;i<s-1;i++){const a=4*(t*s+i),o=(e[a]+e[a+1]+e[a+2])/3>128?255:0;n[a]=o,n[a+1]=o,n[a+2]=o,n[a+3]=255}return new ImageData(n,s,i)}drawImageData(t){this.ctx.putImageData(t,0,0)}toggleEdgeDetection(){this.showEdges=!this.showEdges,this.toggleEffectBtn.textContent=this.showEdges?"Show Original":"Show Edges",this.showEdges?this.applyEdgeDetection():this.loadSampleImage()}updateFPS(){this.fps=this.frameCount,this.frameCount=0,this.fpsElement.textContent=this.fps.toString()}updateResolution(t,e){this.resolutionElement.textContent=`${t}Ã—${e}`}updateStatus(t){this.statusElement.textContent=t}}document.addEventListener("DOMContentLoaded",()=>{new s})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,